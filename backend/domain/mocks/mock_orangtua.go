// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rg-km/final-project-engineering-4/backend/domain (interfaces: OrangTuaRepository,OrangTuaUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rg-km/final-project-engineering-4/backend/domain"
)

// MockOrangTuaRepository is a mock of OrangTuaRepository interface.
type MockOrangTuaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrangTuaRepositoryMockRecorder
}

// MockOrangTuaRepositoryMockRecorder is the mock recorder for MockOrangTuaRepository.
type MockOrangTuaRepositoryMockRecorder struct {
	mock *MockOrangTuaRepository
}

// NewMockOrangTuaRepository creates a new mock instance.
func NewMockOrangTuaRepository(ctrl *gomock.Controller) *MockOrangTuaRepository {
	mock := &MockOrangTuaRepository{ctrl: ctrl}
	mock.recorder = &MockOrangTuaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrangTuaRepository) EXPECT() *MockOrangTuaRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrangTuaRepository) Create(arg0 domain.OrangTua) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrangTuaRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrangTuaRepository)(nil).Create), arg0)
}

// GetByEmail mocks base method.
func (m *MockOrangTuaRepository) GetByEmail(arg0 string) (*domain.OrangTua, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*domain.OrangTua)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockOrangTuaRepositoryMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockOrangTuaRepository)(nil).GetByEmail), arg0)
}

// MockOrangTuaUseCase is a mock of OrangTuaUseCase interface.
type MockOrangTuaUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrangTuaUseCaseMockRecorder
}

// MockOrangTuaUseCaseMockRecorder is the mock recorder for MockOrangTuaUseCase.
type MockOrangTuaUseCaseMockRecorder struct {
	mock *MockOrangTuaUseCase
}

// NewMockOrangTuaUseCase creates a new mock instance.
func NewMockOrangTuaUseCase(ctrl *gomock.Controller) *MockOrangTuaUseCase {
	mock := &MockOrangTuaUseCase{ctrl: ctrl}
	mock.recorder = &MockOrangTuaUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrangTuaUseCase) EXPECT() *MockOrangTuaUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockOrangTuaUseCase) Login(arg0, arg1 string) (*domain.OrangTua, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*domain.OrangTua)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockOrangTuaUseCaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockOrangTuaUseCase)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockOrangTuaUseCase) Register(arg0 domain.OrangTua) (*domain.OrangTua, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*domain.OrangTua)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockOrangTuaUseCaseMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockOrangTuaUseCase)(nil).Register), arg0)
}
