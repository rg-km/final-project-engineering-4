// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rg-km/final-project-engineering-4/backend/domain (interfaces: SiswaRepository,SiswaUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rg-km/final-project-engineering-4/backend/domain"
)

// MockSiswaRepository is a mock of SiswaRepository interface.
type MockSiswaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSiswaRepositoryMockRecorder
}

// MockSiswaRepositoryMockRecorder is the mock recorder for MockSiswaRepository.
type MockSiswaRepositoryMockRecorder struct {
	mock *MockSiswaRepository
}

// NewMockSiswaRepository creates a new mock instance.
func NewMockSiswaRepository(ctrl *gomock.Controller) *MockSiswaRepository {
	mock := &MockSiswaRepository{ctrl: ctrl}
	mock.recorder = &MockSiswaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSiswaRepository) EXPECT() *MockSiswaRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSiswaRepository) Create(arg0 domain.Siswa) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSiswaRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSiswaRepository)(nil).Create), arg0)
}

// GetByEmail mocks base method.
func (m *MockSiswaRepository) GetByEmail(arg0 string) (*domain.Siswa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*domain.Siswa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockSiswaRepositoryMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockSiswaRepository)(nil).GetByEmail), arg0)
}

// GetByUsername mocks base method.
func (m *MockSiswaRepository) GetByUsername(arg0 string) (*domain.Siswa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", arg0)
	ret0, _ := ret[0].(*domain.Siswa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockSiswaRepositoryMockRecorder) GetByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockSiswaRepository)(nil).GetByUsername), arg0)
}

// MockSiswaUseCase is a mock of SiswaUseCase interface.
type MockSiswaUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSiswaUseCaseMockRecorder
}

// MockSiswaUseCaseMockRecorder is the mock recorder for MockSiswaUseCase.
type MockSiswaUseCaseMockRecorder struct {
	mock *MockSiswaUseCase
}

// NewMockSiswaUseCase creates a new mock instance.
func NewMockSiswaUseCase(ctrl *gomock.Controller) *MockSiswaUseCase {
	mock := &MockSiswaUseCase{ctrl: ctrl}
	mock.recorder = &MockSiswaUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSiswaUseCase) EXPECT() *MockSiswaUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockSiswaUseCase) Login(arg0, arg1 string) (*domain.Siswa, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*domain.Siswa)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockSiswaUseCaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSiswaUseCase)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockSiswaUseCase) Register(arg0 domain.Siswa) (*domain.Siswa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*domain.Siswa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSiswaUseCaseMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSiswaUseCase)(nil).Register), arg0)
}
