// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rg-km/final-project-engineering-4/backend/domain (interfaces: GuruRepository,GuruUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// MockGuruRepository is a mock of GuruRepository interface.
type MockGuruRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGuruRepositoryMockRecorder
}

// MockGuruRepositoryMockRecorder is the mock recorder for MockGuruRepository.
type MockGuruRepositoryMockRecorder struct {
	mock *MockGuruRepository
}

// NewMockGuruRepository creates a new mock instance.
func NewMockGuruRepository(ctrl *gomock.Controller) *MockGuruRepository {
	mock := &MockGuruRepository{ctrl: ctrl}
	mock.recorder = &MockGuruRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuruRepository) EXPECT() *MockGuruRepositoryMockRecorder {
	return m.recorder
}

// MockGuruUseCase is a mock of GuruUseCase interface.
type MockGuruUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGuruUseCaseMockRecorder
}

// MockGuruUseCaseMockRecorder is the mock recorder for MockGuruUseCase.
type MockGuruUseCaseMockRecorder struct {
	mock *MockGuruUseCase
}

// NewMockGuruUseCase creates a new mock instance.
func NewMockGuruUseCase(ctrl *gomock.Controller) *MockGuruUseCase {
	mock := &MockGuruUseCase{ctrl: ctrl}
	mock.recorder = &MockGuruUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuruUseCase) EXPECT() *MockGuruUseCaseMockRecorder {
	return m.recorder
}
