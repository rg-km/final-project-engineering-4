// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rg-km/final-project-engineering-4/backend/domain (interfaces: KelasRepository,KelasUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// MockKelasRepository is a mock of KelasRepository interface.
type MockKelasRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKelasRepositoryMockRecorder
}

// MockKelasRepositoryMockRecorder is the mock recorder for MockKelasRepository.
type MockKelasRepositoryMockRecorder struct {
	mock *MockKelasRepository
}

// NewMockKelasRepository creates a new mock instance.
func NewMockKelasRepository(ctrl *gomock.Controller) *MockKelasRepository {
	mock := &MockKelasRepository{ctrl: ctrl}
	mock.recorder = &MockKelasRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKelasRepository) EXPECT() *MockKelasRepositoryMockRecorder {
	return m.recorder
}

// MockKelasUseCase is a mock of KelasUseCase interface.
type MockKelasUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockKelasUseCaseMockRecorder
}

// MockKelasUseCaseMockRecorder is the mock recorder for MockKelasUseCase.
type MockKelasUseCaseMockRecorder struct {
	mock *MockKelasUseCase
}

// NewMockKelasUseCase creates a new mock instance.
func NewMockKelasUseCase(ctrl *gomock.Controller) *MockKelasUseCase {
	mock := &MockKelasUseCase{ctrl: ctrl}
	mock.recorder = &MockKelasUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKelasUseCase) EXPECT() *MockKelasUseCaseMockRecorder {
	return m.recorder
}
